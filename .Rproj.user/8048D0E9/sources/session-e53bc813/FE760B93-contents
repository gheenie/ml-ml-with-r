u <- seq(from=-10, to=0, length.out=11)
v <- seq(-0.1, 5.4, by=0.5, length=11)
source("~/projects/msc-ds/ml-ml-with-r/week_1.R", echo=TRUE)
source("~/projects/msc-ds/ml-ml-with-r/week_1.R", echo=TRUE)
print(v)
print(u)
# Question 2
v <- seq(-0.1, by=0.5, length=11)
print(v)
u + v
u * v
u * v
u + 1
u * 0.8
w <- c(u, v)
print(w)
length(w)
w[14:16]
w[c(2, 5, 9, 21)]
w[23]
sort(w, decreasing=TRUE)
b_matrix <- matrix(
seq(1, 39, by=2),
4,
5,
byrow=T,
dimnames=list(c('A', 'B', 'C', 'D'), c('a', 'b', 'c', 'd', 'e')))
b_matrix <- matrix(
seq(1, 39, by=2),
4,
5,
byrow=T,
dimnames=list(c('A', 'B', 'C', 'D'), c('a', 'b', 'c', 'd', 'e'))
)
b_matrix
subB <- b_matrix[c(1, 2, 4), c(2, 3)]
subB
x <- c(1, 2, 3)
y <- c(4, 5, 6)
z <- c(7, 8, 9)
A <- cbind(x, y, z)
rownames(A) <- c('a', 'b', 'c')
colnames(A) <- c('X', 'Y', 'Z')
A
b_matrix <- matrix(
seq(1, 39, by=2),
4,
5,
byrow=T,
dimnames=c(c('A', 'B', 'C', 'D'), c('a', 'b', 'c', 'd', 'e'))
)
b_matrix <- matrix(
seq(1, 39, by=2),
4,
5,
byrow=T,
dimnames=list(list('A', 'B', 'C', 'D'), c('a', 'b', 'c', 'd', 'e'))
)
b_matrix
A
# If combined by rows:
B <- rbind(x, y, z)
B
b_matrix <- matrix(
seq(1, 39, by=2),
4,
5,
byrow=T,
dimnames=c(c('A', 'B', 'C', 'D'), c('a', 'b', 'c', 'd', 'e'))
)
subB <- b_matrix[c(1, 2, 4), c(2, 3)]
subB
B
x <- c(10, 2, 15, 6, 4, 9, 12, 11, 3, 0, 12, 10, 9, 7, 11, 10, 8, 5, 10, 6)
length(x)
sum(x)
mean(x)
median(x)
# Mode.
names(sort(-table(x)))[1]
table(x)
-table(x)
sort(-table(x))
summary(x)
var(x)
sd(x)
y <- rnorm(10, mean(x), 1)
cov(x, y)
y <- rnorm(20, mean(x), 1)
cov(x, y)
y <- rnorm(10, mean(x), 1)
cor(x, y)
y <- rnorm(20, mean(x), 1)
cov(x, y)
cor(x, y)
y <- rnorm(20, mean(x), 1)
cov(x, y)
cor(x, y)
y <- rnorm(20, mean(x), 1)
set.seed(63)
cov(x, y)
cor(x, y)
y <- rnorm(20, mean(x), 1)
cov(x, y)
cor(x, y)
y <- rnorm(20, mean(x), 1)
cov(x, y)
cor(x, y)
y <- rnorm(20, mean(x), 1)
set.seed(63)
cov(x, y)
cor(x, y)
y <- rnorm(20, mean(x), 1)
set.seed(63)
cov(x, y)
cor(x, y)
y <- rnorm(20, mean(x), 1)
set.seed(63)
cov(x, y)
cor(x, y)
y <- rnorm(20, mean(x), 1)
cov(x, y)
cor(x, y)
y <- rnorm(20, mean(x), 1)
cov(x, y)
cor(x, y)
set.seed(63)
y <- rnorm(20, mean(x), 1)
cov(x, y)
cor(x, y)
y <- rnorm(20, mean(x), 1)
cov(x, y)
cor(x, y)
set.seed(100)
z <- rnorm(20, 8, 1)
plot(
z ~ x,
main='Scatter plot of x and z',
xlab='x',
ylab='z'
)
plot(
z ~ x,
main='Scatter plot of x and z',
xlab='x',
ylab='z',
ylim=c(-10, 40)
)
u <- rnorm(20, 8, 10)
# points() adds points to the existing plot.
points(x,u, col = "blue", pch = "+")
set.seed(100)
u <- rnorm(20, 8, 10)
# points() adds points to the existing plot.
points(x,u, col = "blue", pch = "+")
set.seed(100)
z <- rnorm(20, 8, 1)
plot(
z ~ x,
main='Scatter plot of x and z',
xlab='x',
ylab='z',
ylim=c(-10, 40)
)
set.seed(100)
u <- rnorm(20, 8, 10)
# points() adds points to the existing plot.
points(u ~ x, col='blue', pch='+')
boxplot(x)
data <- data.frame(x, y)
data
x
y
data <- data.frame(x, y)
boxplot(
data,
col=c('green', 'orange'),
main='Boxplot for x and y',
names=c('Green X', 'Orange Y')
)
damage <- c(26.2, 17.8, 31.3, 23.1, 27.5, 36.0, 14.1, 22.3, 19.6, 31.3, 24.0, 17.3, 43.2, 36.4, 26.1)
distance <- c(3.4, 1.8, 4.6, 2.3, 3.1, 5.5, 0.7, 3.0, 2.6, 4.3, 2.1, 1.1, 6.1, 4.8, 3.8)
fireDamage <- data.frame(damage, distance)
lm.fit <- lm(damage ~ distance, fireDamage)
lm.fit
plot(
damage ~ distance,
xlab='distance',
ylab='damage',
main='Plot of damage against distance'
)
abline(lm.fit)
summary(lm.fit)
randomVariableName <- lm(damage ~ distance, fireDamage)
summary(randomVariableName)
summary(lm.fit)
predict(lm.fit, newdata=data.frame(distance=(0.5:3.5)))
data.frame(distance=(0.5:3.5))
(0.5:3.5)
c(0.5:3.5)
predict(lm.fit, newdata=data.frame(distance=(0.5, 3., 5.5)), interval='prediction')
(2:4)
(2,3,4)
predict(lm.fit, newdata=data.frame(distance=(0.5, 3, 5.5)), interval='prediction')
predict(lm.fit, newdata=data.frame(distance=c(0.5, 3, 5.5)), interval='prediction')
predict(lm.fit, newdata=data.frame(distance=c(0.5, 3, 5.5)), interval='confidence')
plot(
damage ~ distance,
xlab='distance',
ylab='damage',
main='Confidence intervals and prediction intervals',
ylim=c(10,50)
)
abline(lm.fit)
newDist <- data.frame(distance=seq(0.75, 6.0, length=51))
confidenceInterval <- predict(lm.fit, newDist, interval='confidence')
predictionInterval <- predict(lm.fit, newDist, interval='prediction')
newDist
confidenceInterval
newDist$distance
List <- list(X = 1:5,
Y = letters[2:6],
Z = 10:15)
List
confidenceInterval
confidenceInterval['lwr']
confidenceInterval[, 'lwr']
confidenceInterval[1, 'lwr']
View(confidenceInterval)
View(confidenceInterval)
newDist <- data.frame(distance=seq(0.75, 6.0, length=51))
newConfidenceInterval <- predict(lm.fit, newDist, interval='confidence')
newPredictionInterval <- predict(lm.fit, newDist, interval='prediction')
newDist
newDist[, 'distance']
newDist$distance
newConfidenceInterval$lwr
lines(newConfidenceInterval[, 'lwr'] ~ newDist$distance, col='red', pch='+')
lines(newConfidenceInterval[, 'lwr'] ~ newDist$distance, col='red', pch='+', type='b')
lines(newConfidenceInterval[, 'upr'] ~ newDist$distance, col='red', pch='+', type='b')
lines(newPredictionInterval[, 'lwr'] ~ newDist$distance, col='blue', pch='*', type='b')
lines(newPredictionInterval[, 'upr'] ~ newDist$distance, col='blue', pch='*', type='b')
legend('bottomright', pch=c('+', '*'), col=c('red', 'blue'), legend=c('confidence', 'interval'))
plot(
damage ~ distance,
xlab='distance',
ylab='damage',
main='Plot of damage against distance')
abline(lm.fit)
library(aod)
getwd()
remove.packages('renv')
